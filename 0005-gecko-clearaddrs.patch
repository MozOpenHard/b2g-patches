diff --git a/gecko/dom/system/gonk/NetworkUtils.cpp b/gecko/dom/system/gonk/NetworkUtils.cpp
index 59534d31..9ff11d6 100644
--- a/gecko/dom/system/gonk/NetworkUtils.cpp
+++ b/gecko/dom/system/gonk/NetworkUtils.cpp
@@ -117,39 +117,42 @@ CommandFunc NetworkUtils::sWifiEnableChain[] = {
   NetworkUtils::tetheringStatus,
   NetworkUtils::startTethering,
   NetworkUtils::setDnsForwarders,
   NetworkUtils::enableNat,
   NetworkUtils::wifiTetheringSuccess
 };
 
 CommandFunc NetworkUtils::sWifiDisableChain[] = {
   NetworkUtils::clearWifiTetherParms,
+  NetworkUtils::clearAddrs,
   NetworkUtils::stopSoftAP,
   NetworkUtils::stopAccessPointDriver,
   NetworkUtils::wifiFirmwareReload,
   NetworkUtils::untetherInterface,
   NetworkUtils::preTetherInterfaceList,
   NetworkUtils::postTetherInterfaceList,
   NetworkUtils::disableNat,
   NetworkUtils::setIpForwardingEnabled,
   NetworkUtils::stopTethering,
   NetworkUtils::wifiTetheringSuccess
 };
 
 CommandFunc NetworkUtils::sWifiFailChain[] = {
   NetworkUtils::clearWifiTetherParms,
+  NetworkUtils::clearAddrs,
   NetworkUtils::stopSoftAP,
   NetworkUtils::setIpForwardingEnabled,
   NetworkUtils::stopTethering
 };
 
 CommandFunc NetworkUtils::sWifiRetryChain[] = {
   NetworkUtils::clearWifiTetherParms,
+  NetworkUtils::clearAddrs,
   NetworkUtils::stopSoftAP,
   NetworkUtils::stopTethering,
 
   // sWifiEnableChain:
   NetworkUtils::wifiFirmwareReload,
   NetworkUtils::startAccessPointDriver,
   NetworkUtils::setAccessPoint,
   NetworkUtils::startSoftAP,
   NetworkUtils::setInterfaceUp,
@@ -230,18 +233,19 @@ CommandFunc NetworkUtils::sNetworkInterfaceDisableAlarmChain[] = {
   NetworkUtils::networkInterfaceAlarmSuccess
 };
 
 CommandFunc NetworkUtils::sNetworkInterfaceSetAlarmChain[] = {
   NetworkUtils::setAlarm,
   NetworkUtils::networkInterfaceAlarmSuccess
 };
 
 CommandFunc NetworkUtils::sSetDnsChain[] = {
+  NetworkUtils::flushDefaultInterface,
   NetworkUtils::setDefaultInterface,
   NetworkUtils::setInterfaceDns
 };
 
 /**
  * Helper function to get the mask from given prefix length.
  */
 static uint32_t makeMask(const uint32_t prefixLength)
 {
@@ -594,18 +598,27 @@ void NetworkUtils::createUpStream(CommandChain* aChain,
 
 void NetworkUtils::startSoftAP(CommandChain* aChain,
                                CommandCallback aCallback,
                                NetworkResultOptions& aResult)
 {
   const char* command= "softap startap";
   doCommand(command, aChain, aCallback);
 }
 
+void NetworkUtils::clearAddrs(CommandChain* aChain,
+                              CommandCallback aCallback,
+                              NetworkResultOptions& aResult)
+{
+  char command[MAX_COMMAND_SIZE];
+  snprintf(command, MAX_COMMAND_SIZE - 1, "interface clearaddrs %s", GET_CHAR(mIfname));
+  doCommand(command, aChain, aCallback);
+}
+
 void NetworkUtils::stopSoftAP(CommandChain* aChain,
                               CommandCallback aCallback,
                               NetworkResultOptions& aResult)
 {
   const char* command= "softap stopap";
   doCommand(command, aChain, aCallback);
 }
 
 void NetworkUtils::clearWifiTetherParms(CommandChain* aChain,
@@ -886,18 +899,28 @@ void NetworkUtils::setDefaultInterface(CommandChain* aChain,
                                        CommandCallback aCallback,
                                        NetworkResultOptions& aResult)
 {
   char command[MAX_COMMAND_SIZE];
   snprintf(command, MAX_COMMAND_SIZE - 1, "resolver setdefaultif %s", GET_CHAR(mIfname));
 
   doCommand(command, aChain, aCallback);
 }
 
+void NetworkUtils::flushDefaultInterface(CommandChain* aChain,
+                                         CommandCallback aCallback,
+                                         NetworkResultOptions& aResult)
+{
+  char command[MAX_COMMAND_SIZE];
+  snprintf(command, MAX_COMMAND_SIZE - 1, "resolver flushdefaultif");
+
+  doCommand(command, aChain, aCallback);
+}
+
 void NetworkUtils::setInterfaceDns(CommandChain* aChain,
                                    CommandCallback aCallback,
                                    NetworkResultOptions& aResult)
 {
   char command[MAX_COMMAND_SIZE];
   int written = snprintf(command, sizeof command, "resolver setifdns %s %s",
                          GET_CHAR(mIfname), GET_CHAR(mDomain));
 
   nsTArray<nsString>& dnses = GET_FIELD(mDnses);
@@ -1263,19 +1286,19 @@ bool NetworkUtils::setDNS(NetworkParams& aOptions)
   // Bump the DNS change property.
   char dnschange[PROPERTY_VALUE_MAX];
   property_get("net.dnschange", dnschange, "0");
 
   char num[PROPERTY_VALUE_MAX];
   snprintf(num, PROPERTY_VALUE_MAX - 1, "%d", atoi(dnschange) + 1);
   property_set("net.dnschange", num);
 
   // DNS needs to be set through netd since JellyBean (4.3).
-  if (SDK_VERSION >= 18) {
+  if (SDK_VERSION >= 17) {
     RUN_CHAIN(aOptions, sSetDnsChain, setDnsFail)
   }
 
   return true;
 }
 
 /**
  * Set default route and DNS servers for given network interface.
  */
diff --git a/gecko/dom/system/gonk/NetworkUtils.h b/gecko/dom/system/gonk/NetworkUtils.h
index bd722fa..1ec8f44 100644
--- a/gecko/dom/system/gonk/NetworkUtils.h
+++ b/gecko/dom/system/gonk/NetworkUtils.h
@@ -310,18 +310,19 @@ private:
                mozilla::dom::NetworkResultOptions& aResult
   static void wifiFirmwareReload(PARAMS);
   static void startAccessPointDriver(PARAMS);
   static void stopAccessPointDriver(PARAMS);
   static void setAccessPoint(PARAMS);
   static void cleanUpStream(PARAMS);
   static void createUpStream(PARAMS);
   static void startSoftAP(PARAMS);
   static void stopSoftAP(PARAMS);
+  static void clearAddrs(PARAMS);
   static void clearWifiTetherParms(PARAMS);
   static void getRxBytes(PARAMS);
   static void getTxBytes(PARAMS);
   static void enableAlarm(PARAMS);
   static void disableAlarm(PARAMS);
   static void setQuota(PARAMS);
   static void removeQuota(PARAMS);
   static void setAlarm(PARAMS);
   static void setInterfaceUp(PARAMS);
@@ -331,18 +332,19 @@ private:
   static void setIpForwardingEnabled(PARAMS);
   static void tetheringStatus(PARAMS);
   static void stopTethering(PARAMS);
   static void startTethering(PARAMS);
   static void untetherInterface(PARAMS);
   static void setDnsForwarders(PARAMS);
   static void enableNat(PARAMS);
   static void disableNat(PARAMS);
   static void setDefaultInterface(PARAMS);
+  static void flushDefaultInterface(PARAMS);
   static void setInterfaceDns(PARAMS);
   static void wifiTetheringSuccess(PARAMS);
   static void usbTetheringSuccess(PARAMS);
   static void networkInterfaceStatsSuccess(PARAMS);
   static void networkInterfaceAlarmSuccess(PARAMS);
   static void updateUpStreamSuccess(PARAMS);
   static void setDhcpServerSuccess(PARAMS);
   static void wifiOperationModeSuccess(PARAMS);
 #undef PARAMS
