diff --git a/gecko/widget/gonk/nsAppShell.cpp b/gecko/widget/gonk/nsAppShell.cpp
index cc83c15..cbd6b55 100644
--- a/gecko/widget/gonk/nsAppShell.cpp
+++ b/gecko/widget/gonk/nsAppShell.cpp
@@ -19,12 +19,13 @@
 #define _GNU_SOURCE
 #endif
 
 #include <dirent.h>
 #include <errno.h>
 #include <fcntl.h>
+#include <linux/fb.h>
 #include <signal.h>
 #include <sys/epoll.h>
 #include <sys/ioctl.h>
 #include <sys/param.h>
 #include <sys/stat.h>
 #include <sys/types.h>
@@ -70,12 +71,17 @@
 
 #include "GeckoProfiler.h"
 
 // Defines kKeyMapping and GetKeyNameIndex()
 #include "GonkKeyMapping.h"
 
+#define FBIOPUT_SET_CURSOR_EN    0x4609
+#define FBIOPUT_SET_CURSOR_IMG   0x460a
+#define FBIOPUT_SET_CURSOR_POS   0x460b
+#define FBIOPUT_SET_CURSOR_CMAP  0x460c
+
 #define LOG(args...)                                            \
     __android_log_print(ANDROID_LOG_INFO, "Gonk" , ## args)
 #ifdef VERBOSE_LOG_ENABLED
 # define VERBOSE_LOG(args...)                           \
     __android_log_print(ANDROID_LOG_INFO, "Gonk" , ## args)
 #else
@@ -462,19 +468,78 @@ updateHeadphoneSwitch()
 
 class GeckoPointerController : public PointerControllerInterface {
     float mX;
     float mY;
     int32_t mButtonState;
     InputReaderConfiguration* mConfig;
+    int32_t mFbHandler;
 public:
     GeckoPointerController(InputReaderConfiguration* config)
         : mX(0)
         , mY(0)
         , mButtonState(0)
         , mConfig(config)
-    {}
+    {
+        mFbHandler = open("/dev/graphics/fb0", O_RDWR, 0);
+        if (mFbHandler < 0)
+            LOG("%s: open fb fail", __func__);
+        else {
+            char cursorImg[128] = {
+            //big mouse with tail
+            0x80, 0x00, 0x00, 0x00,
+            0xE0, 0x00, 0x00, 0x00,
+            0x78, 0x00, 0x00, 0x00,
+            0x7E, 0x00, 0x00, 0x00,
+            0x3F, 0x80, 0x00, 0x00,
+            0x3F, 0xE0, 0x00, 0x00,
+            0x1F, 0xF8, 0x00, 0x00,
+            0x1F, 0xFE, 0x00, 0x00,
+            0x0F, 0xFF, 0x80, 0x00,
+            0x0F, 0xFF, 0xE0, 0x00,
+            0x07, 0xFF, 0xF8, 0x00,
+            0x07, 0xFF, 0xFE, 0x00,
+            0x03, 0xFF, 0xFF, 0x80,
+            0x03, 0xFF, 0xFF, 0xE0,
+            0x01, 0xFF, 0xFF, 0xF8,
+            0x01, 0xFF, 0xFF, 0xFC,
+            0x00, 0xFF, 0xFF, 0xF8,
+            0x00, 0xFF, 0xFF, 0xF0,
+            0x00, 0x7F, 0xFF, 0xE0,
+            0x00, 0x7F, 0xFF, 0xC0,
+            0x00, 0x3F, 0xFF, 0x80,
+            0x00, 0x3F, 0xFF, 0x80,
+            0x00, 0x1F, 0xFF, 0xC0,
+            0x00, 0x1F, 0xFF, 0xE0,
+            0x00, 0x0F, 0xFF, 0xF0,
+            0x00, 0x0F, 0xF3, 0xF8,
+            0x00, 0x07, 0xE1, 0xFC,
+            0x00, 0x07, 0xC0, 0xFE,
+            0x00, 0x03, 0x80, 0x7F,
+            0x00, 0x03, 0x00, 0x3F,
+            0x00, 0x00, 0x00, 0x1E,
+            0x00, 0x00, 0x00, 0x0C,
+            };
+            struct fb_image img;
+            int cursor_en = 1;
+            int red, green, blue;
+            char propVal[PROPERTY_VALUE_MAX];
+            property_get("cursor.hw.colour.red", propVal, "255");
+            red = atoi(propVal);
+            property_get("cursor.hw.colour.green", propVal, "0");
+            green = atoi(propVal);
+            property_get("cursor.hw.colour.blue", propVal, "0");
+            blue = atoi(propVal);
+
+            img.bg_color = 0xff;
+            img.fg_color = ((red<<16) + (green<<8) + blue);
+
+            ioctl(mFbHandler, FBIOPUT_SET_CURSOR_CMAP, &img);
+            ioctl(mFbHandler, FBIOPUT_SET_CURSOR_IMG, cursorImg);
+            ioctl(mFbHandler, FBIOPUT_SET_CURSOR_EN, &cursor_en);
+        }
+    }
 
     virtual bool getBounds(float* outMinX, float* outMinY,
             float* outMaxX, float* outMaxY) const;
     virtual void move(float deltaX, float deltaY);
     virtual void setButtonState(int32_t buttonState);
     virtual int32_t getButtonState() const;
@@ -483,12 +548,20 @@ public:
     virtual void fade(Transition transition) {}
     virtual void unfade(Transition transition) {}
     virtual void setPresentation(Presentation presentation) {}
     virtual void setSpots(const PointerCoords* spotCoords, const uint32_t* spotIdToIndex,
             BitSet32 spotIdBits) {}
     virtual void clearSpots() {}
+    virtual ~GeckoPointerController() {
+        if (mFbHandler >= 0) {
+            int cursor_en = 0;
+            ioctl(mFbHandler, FBIOPUT_SET_CURSOR_EN, &cursor_en);
+            close(mFbHandler);
+            mFbHandler = -1;
+        }
+    }
 };
 
 bool
 GeckoPointerController::getBounds(float* outMinX,
                                   float* outMinY,
                                   float* outMaxX,
@@ -509,12 +582,18 @@ GeckoPointerController::move(float deltaX, float deltaY)
 {
     float minX, minY, maxX, maxY;
     getBounds(&minX, &minY, &maxX, &maxY);
 
     mX = clamped(mX + deltaX, minX, maxX);
     mY = clamped(mY + deltaY, minY, maxY);
+    if (mFbHandler >= 0) {
+        struct fbcurpos cursor_pos;
+        cursor_pos.x = mX;
+        cursor_pos.y = mY;
+        ioctl(mFbHandler, FBIOPUT_SET_CURSOR_POS, &cursor_pos);
+    }
 }
 
 void
 GeckoPointerController::setButtonState(int32_t buttonState)
 {
     mButtonState = buttonState;
